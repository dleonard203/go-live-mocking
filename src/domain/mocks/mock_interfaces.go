// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/dleonard203/go-live-mocking/src/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockIS3Reader is a mock of IS3Reader interface.
type MockIS3Reader struct {
	ctrl     *gomock.Controller
	recorder *MockIS3ReaderMockRecorder
}

// MockIS3ReaderMockRecorder is the mock recorder for MockIS3Reader.
type MockIS3ReaderMockRecorder struct {
	mock *MockIS3Reader
}

// NewMockIS3Reader creates a new mock instance.
func NewMockIS3Reader(ctrl *gomock.Controller) *MockIS3Reader {
	mock := &MockIS3Reader{ctrl: ctrl}
	mock.recorder = &MockIS3ReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIS3Reader) EXPECT() *MockIS3ReaderMockRecorder {
	return m.recorder
}

// GetObjectContents mocks base method.
func (m *MockIS3Reader) GetObjectContents(bucket, path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectContents", bucket, path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectContents indicates an expected call of GetObjectContents.
func (mr *MockIS3ReaderMockRecorder) GetObjectContents(bucket, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectContents", reflect.TypeOf((*MockIS3Reader)(nil).GetObjectContents), bucket, path)
}

// MockISensorIngetsor is a mock of ISensorIngetsor interface.
type MockISensorIngetsor struct {
	ctrl     *gomock.Controller
	recorder *MockISensorIngetsorMockRecorder
}

// MockISensorIngetsorMockRecorder is the mock recorder for MockISensorIngetsor.
type MockISensorIngetsorMockRecorder struct {
	mock *MockISensorIngetsor
}

// NewMockISensorIngetsor creates a new mock instance.
func NewMockISensorIngetsor(ctrl *gomock.Controller) *MockISensorIngetsor {
	mock := &MockISensorIngetsor{ctrl: ctrl}
	mock.recorder = &MockISensorIngetsorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISensorIngetsor) EXPECT() *MockISensorIngetsorMockRecorder {
	return m.recorder
}

// WriteHumidityReadings mocks base method.
func (m *MockISensorIngetsor) WriteHumidityReadings(readings []domain.HumidityStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteHumidityReadings", readings)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteHumidityReadings indicates an expected call of WriteHumidityReadings.
func (mr *MockISensorIngetsorMockRecorder) WriteHumidityReadings(readings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHumidityReadings", reflect.TypeOf((*MockISensorIngetsor)(nil).WriteHumidityReadings), readings)
}

// MockIPanicHandler is a mock of IPanicHandler interface.
type MockIPanicHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIPanicHandlerMockRecorder
}

// MockIPanicHandlerMockRecorder is the mock recorder for MockIPanicHandler.
type MockIPanicHandlerMockRecorder struct {
	mock *MockIPanicHandler
}

// NewMockIPanicHandler creates a new mock instance.
func NewMockIPanicHandler(ctrl *gomock.Controller) *MockIPanicHandler {
	mock := &MockIPanicHandler{ctrl: ctrl}
	mock.recorder = &MockIPanicHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPanicHandler) EXPECT() *MockIPanicHandlerMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockIPanicHandler) Notify(reason any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockIPanicHandlerMockRecorder) Notify(reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockIPanicHandler)(nil).Notify), reason)
}
